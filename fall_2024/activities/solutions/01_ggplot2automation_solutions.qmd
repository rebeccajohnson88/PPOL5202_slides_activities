---
title: "ggplot2 automation"
format: html
editor: visual
execute: 
  warning: false
  message: false
---

# Automation

In this activity, you'll work to produce the following:

A template that can be used to compare a focal county's demographic statistics to other counties in that state

Use that template to create a separate report for 3 distinct counties

## Exercise 1: create a plot for a single county

- Use the `midwest` data
- Focus on `county == "COOK"` within `state == "IL"` as the focal county 
- Create a bar graph where the bars represent the mean value of the following statistics for all the remaining counties in Illinois (so counties minus Cook):
  - `perchsd`: percent with a high school diploma
  - `percollege`: percent with a college degree
  - `percprof`: percent with a professional school degree
  
- Adds a dot + label to that bar graph with the focal county's own statistics (at the rough height of where that statistic falls along the `y axis`) compared to the mean value 
  
```{r}
#| echo: false
#| output: true
library(tidyverse)
library(ggplot2)
library(reshape2)

stats_comparison <- rbind.data.frame(midwest %>%
            filter(state == "IL" & county != "COOK") %>%
            summarise(hsd = mean(perchsd), college =  mean(percollege), 
                      professional = mean(percprof)) %>%
            mutate(category = "other"),
            midwest %>%
            filter(state == "IL" & county == "COOK") %>%
            summarise(hsd = mean(perchsd), college =  mean(percollege), 
                      professional = mean(percprof)) %>%
            mutate(category = "COOK")) %>%
            reshape2::melt(., id.vars = "category") %>%
            mutate(variable_descriptive = 
            factor(case_when(variable == "hsd" ~ "High school degree",
                      variable == "college" ~ "College degree",
                      variable == "professional" ~ "Professional school"),
                levels = c("High school degree",
                           "College degree",
                           "Professional school"),
                ordered = TRUE)) 

stats_toplot <- stats_comparison %>%
          left_join(stats_comparison %>% filter(category == "other") 
                  %>% rename(mean_value = value) %>%
                  select(variable, mean_value),
                  by = "variable") 

            
ggplot(stats_toplot %>% filter(category == "other"), 
       aes(x = variable_descriptive, 
                            y = value)) +
  geom_bar(stat = "identity", color = "black", 
           fill = "wheat4") +
  xlab("Highest level of educational attainment") +
  ylab("Percentage in county (mean across other\nIllinois counties)") +
  geom_point(data = stats_toplot %>% filter(category != "other"),
             aes(x = variable_descriptive, 
                 y = value),
             color = "red", size = 4) +
  geom_label(data = stats_toplot %>% filter(category != "other"),
             aes(x = variable_descriptive, 
                 y = value, 
                 label = sprintf("Cook County's rate: %.2f\nMean rate: %.2f",
                                 value, 
                                 mean_value)),
          color = "red",
          size = 2,
          nudge_y = 5) +
  ylim(0, 100)

```


## Exercise 2: generalize to create a county comparison function 

Write a function that generalizes the plot from exercise 1 by:
- Taking in two parameters: county + state
- Finding the remaining counties in that state
- Creating the same plot as above (making sure to label the county-specific rate appropriately with the county's name)
- Test the function on a few different counties from different states


```{r}
library(tidyverse)
library(ggplot2)
library(stringr)

comparison_plot <- function(state_name, county_name){
  
  stats_comparison <- rbind.data.frame(midwest %>%
            filter(state == state_name & county != county_name) %>%
            summarise(hsd = mean(perchsd), college =  mean(percollege), 
                      professional = mean(percprof)) %>%
            mutate(category = "other"),
            midwest %>%
            filter(state == state_name & county == county_name) %>%
            summarise(hsd = mean(perchsd), college =  mean(percollege), 
                      professional = mean(percprof)) %>%
            mutate(category = county_name)) %>%
            reshape2::melt(., id.vars = "category") %>%
            mutate(variable_descriptive = 
            factor(case_when(variable == "hsd" ~ "High school degree",
                      variable == "college" ~ "College degree",
                      variable == "professional" ~ "Professional school"),
                levels = c("High school degree",
                           "College degree",
                           "Professional school"),
                ordered = TRUE)) 
  
  stats_toplot <- stats_comparison %>%
          left_join(stats_comparison %>% filter(category == "other") 
                  %>% rename(mean_value = value) %>%
                  select(variable, mean_value),
                  by = "variable") 
  
  p <- ggplot(stats_toplot %>% filter(category == "other"), 
       aes(x = variable_descriptive, 
                            y = value)) +
  geom_bar(stat = "identity", color = "black", 
           fill = "wheat4") +
  xlab("Highest level of educational attainment") +
  ylab(sprintf("Percentage in county (mean across other\n%s counties)",
      state.name[state.abb == state_name])) +
  geom_point(data = stats_toplot %>% filter(category != "other"),
             aes(x = variable_descriptive, 
                 y = value),
             color = "red", size = 4) +
  geom_label(data = stats_toplot %>% filter(category != "other"),
             aes(x = variable_descriptive, 
                 y = value, 
                 label = sprintf("%s county's rate: %.2f\nMean rate: %.2f",
                                 str_to_title(county_name),
                                 value, 
                                 mean_value)),
          color = "red",
          size = 2,
          nudge_y = 5) +
  ylim(0, 100)
  
  return(p)
  
}

comparison_plot(state_name = "IL", county_name = "COOK")
comparison_plot(state_name = "WI", county_name = "DANE")
comparison_plot(state_name = "MI", county_name = "WASHTENAW")

```


## Exercise 3: use that function to create a county-specific report 

- Modify the `county_template.qmd` file to add in the missing components
- Write and execute a bash script to generate reports for the following counties within Illinois:
  - "COOK"
  - "CHAMPAIGN"
  - "LAKE"
  
  
  See other file for solutions 


