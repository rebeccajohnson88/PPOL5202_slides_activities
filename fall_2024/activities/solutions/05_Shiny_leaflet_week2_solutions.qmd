---
title: "Shiny: Week two (leaflet)"
format:
  html:
    embed-resources: true
editor: visual
execute: 
  warning: false
  message: false
---

# Activity 1: outside of an app, create a leaflet map of DC liquor licenses

-   Read in the `Liquor_Licenses.geojson` file - filter out the empty geomeries
-   Create a map where you use:
-   OpenStreetMap as the background tile
-   Circle marker to indicate each location of a license
-   Use the `clusterOptions = markerClusterOptions()` to cluster together locations of a high density of markers
-   Add a label to each point using the `TRADE_NAME` and `TYPE` columns

```{r}
library(here)
library(sf)
library(leaflet)
library(tidyverse)

l <- sf::st_read(here("fall_2024/activities/solutions/Liquor_Licenses.geojson")) %>%
      st_transform(crs = 4326)

head(l)

l$long <- st_coordinates(l)[, 1]

l$lat <- st_coordinates(l)[, 2]

leaflet() %>%
    addProviderTiles("OpenStreetMap",
                     group = "OpenStreetMap")  %>%
    addCircleMarkers(data = 
              l, lat = ~lat,
               lng = ~long,
               color = 'darkgreen', radius = 2,
              clusterOptions = markerClusterOptions(),
              label = sprintf("Trade name: %s<br>Type of location: %s",
                               l$TRADE_NAME,
                               l$TYPE) %>%
                            lapply(htmltools::HTML))
```

# Activity 2: put that code in a Shiny app + add filtering option

-   Embed the above map in a Shiny app
-   Use the `selectInput` widget to allow users to filter the points by 1 or more types of establishments
-   When doing the filtering, create a `reactive` object on the server side that stores the filtered output

```{r}
#| echo: true
#| output: false
#| eval: false 

library(shiny)
library(tidyverse)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(sf)
library(here)

l <- sf::st_read(here("fall_2024/activities/solutions/Liquor_Licenses.geojson")) %>%
  st_transform(crs = 4326)
l$long <- st_coordinates(l)[, 1]

l$lat <- st_coordinates(l)[, 2]


ui <- fluidPage(
  # Application title
  titlePanel("Map of Liquor Licenses in DC"),
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId= "input_type",
                  label = "Type of establishment:",
                  choices = sort(unique(l$TYPE)),
                  selected = "Tavern",
                  multiple = TRUE)
    ),
    mainPanel(
      # Leaflet output
      leafletOutput("map")
    )
  )
  
)

# Define server logic required to draw a histogram
server <- function(input, output) {
  
  d <- reactive({
    l %>%
      filter(TYPE %in% input$input_type)
    
  })
  
  output$map <- renderLeaflet({
    leaflet() %>%
      addProviderTiles("OpenStreetMap",
                       group = "OpenStreetMap")  %>%
      addCircleMarkers(data = 
                         d(), lat = ~lat,
                       lng = ~long,
                       color = 'darkgreen', radius = 2,
                       clusterOptions = markerClusterOptions(),
                       label = sprintf("Trade name: %s<br>Type of location: %s",
                                       d()$TRADE_NAME,
                                       d()$TYPE) %>%
                         lapply(htmltools::HTML))
  })
  
}

# Run the application 
shinyApp(ui = ui, server = server)


```

# Activity 3: modify the Shiny app to have one tab with the map, another with data to download

Create a two-tab app:

-   The first tab should contain the map
-   The second tab should contain a button to download a csv file reflecting the selected establishment types

```{r}
#| echo: true
#| output: false
#| eval: false 

ui <- fluidPage(
  # Application title
  titlePanel("Map of Liquor Licenses in DC"),
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId= "input_type",
                  label = "Type of establishment:",
                  choices = sort(unique(l$TYPE)),
                  selected = "Tavern",
                  multiple = TRUE)
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Map of locations", leafletOutput("map")),
        tabPanel("Download Locations", 
                 downloadButton("csv_download", "Download the locations"))
      )
    )
  )
  
)

# Define server logic required to draw a histogram
server <- function(input, output) {
  
  d <- reactive({
    l %>%
      filter(TYPE %in% input$input_type)
    
  })
  
  output$map <- renderLeaflet({
    leaflet() %>%
      addProviderTiles("OpenStreetMap",
                       group = "OpenStreetMap")  %>%
      addCircleMarkers(data = 
                         d(), lat = ~lat,
                       lng = ~long,
                       color = 'darkgreen', radius = 2,
                       clusterOptions = markerClusterOptions(),
                       label = sprintf("Trade name: %s<br>Type of location: %s",
                                       d()$TRADE_NAME,
                                       d()$TYPE) %>%
                         lapply(htmltools::HTML))
  })
  
  output$csv_download <- downloadHandler(
    filename = function(){paste("licenses-filtered-", 
                                Sys.time(),
                                ".csv", sep = "")},
    content = function(file){
      write.csv(d(), file)
    }
  )
}


```
