---
title: "Model Visualization"
format: html
editor: visual
execute: 
  warning: false
  message: false
---

# Model Visualization

## Exercise 1: improve the climate change coefficients plot

-   Begin with the coefficients plot from the lecture activity (we reproduce the cleaning / model estimation below)
-   Improve the coefficients plot in two ways:
    -   For each of the categorical variables, add the reference category
    -   Color the coefficients by type of category

```{r}
#| echo: false
#| output: true 
library(tidyverse)
library(ggplot2)
library(haven)
#library(devtools)
#install_github("jamesmartherus/anesr")
#library(anesr)
library(broom)

socialmedia_2020 = read.csv("socialmedia_2020.csv")
socialmedia_2020 <- socialmedia_2020 %>%
          mutate(derived_climate_nohuman = 
            case_when(c_self %in% c(1, 2) ~ TRUE, 
                      c_self %in% c(3, 4) ~ FALSE, 
                      TRUE ~ NA),
            derived_age = case_when(profile_age == "80+" ~ 80, 
                                  TRUE ~ as.numeric(profile_age)),
            derived_female = profile_gender == 2,
            derived_raceth = 
          case_when(profile_racethnicity == 1 ~ "White non-Hispanic",
                  profile_racethnicity == 2 ~ "Black non-Hispanic",
                  profile_racethnicity == 3 ~ "Other non-Hispanic",
                  profile_racethnicity == 4 ~ "Hispanic"),
            derived_educ = 
        case_when(profile_educ5 == 1 ~ "< High School",
                  profile_educ5 == 2 ~ "HS grad",
                  profile_educ5 == 3 ~ "Some college",
                  profile_educ5 == 4 ~ "College",
                  profile_educ5 == 5 ~ "Professional school"),
    derived_vote = case_when(vote20d1 == 1 ~ "Trump",
                             vote20d1 == 2 ~ "Biden",
                             vote20d1 != -7 ~ "Other",
                             TRUE ~ NA))

dv <- "derived_climate_nohuman"
covars <- setdiff(grep("derived", colnames(socialmedia_2020), 
               value = TRUE),
               dv)
climate_attitudes <- lm(formula(sprintf("%s ~ %s",
                    dv, paste(covars, collapse = "+"))),
                    data = socialmedia_2020) 

## your code here 

cl_toplot <- tidy(climate_attitudes, conf.int = TRUE) %>%
          mutate(term_clean = paste(gsub("derived\\_", "", term)),
                 term_type = term_clean == 'age' | term_clean == 'femaleTRUE',
                 term_ref = case_when()) %>%
          filter(!grepl("Intercept", term_clean))
cl_toplot

p <- ggplot(cl_toplot,
       aes(x = reorder(term_clean, estimate), y = estimate, 
           ymin = conf.low, 
           ymax = conf.high)) +
  geom_pointrange() +
  ylab("Estimate from OLS model\n(positive = more likely to view no human role\nin climate change)") +
  xlab("Predictor") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  coord_flip() +
  theme_bw() 

p

levels(factor(socialmedia_2020$derived_educ))

socialmedia_2020

```

## Exercise 2: predicted probabilities with more continuous predictor

Create plots that examines the following contrast:

-   Age values ranging from 20 to 60 incrementing by 1 year
-   For each age value, Biden v. Trump voters
-   Other values at: female, some college, and white non-Hispanic

For the plot, have the x axis be age, y axis be the predicted probability of endorsing no human role in climate change, and group/color by intended vote choice

Create two plots:

1.  One plot using `geom_point()` and `geom_errorbar()` to illustrate the point estimates + uncertainty
2.  Another plot using `geom_line()` and `geom_ribbon()` to illustrate the point estimates + uncertainty

```{r}
#| echo: false
#| output: true 
## model for reference
climate_attitudes_glm <- glm(formula(sprintf("%s ~ %s",
                    dv, paste(covars, collapse = "+"))),
                    data = socialmedia_2020,
                    family = "binomial")  

## your code here

mode <- function(codes){
  which.max(tabulate(codes))
}

## compare college trump v biden voters to hs trump voter
## others at their median or median values either 
## within group or across the full sample
data_topredict <- data.frame(derived_vote = 
                        c(rep("Trump", 41),
                          rep("Biden", 41)),
                        derived_age = c(rep(seq(from = 20, to = 60, by = 1), 2))) %>%
            mutate(derived_female = TRUE, 
                   derived_raceth = "White non-Hispanic",
                   derived_educ = "Some college")

data_topredict

aug_result <- augment(climate_attitudes_glm,
                      newdata = data_topredict,
                      type.predict = "response",
                      se_fit = TRUE) %>%
              mutate(lower = .fitted-1.96*.se.fit,
                     upper = .fitted+1.96*.se.fit) 
aug_result %>%
  select(derived_vote, derived_educ,
         .fitted, lower, upper) 


#climate_attitudes_glm


p <- ggplot(aug_result, aes(x = factor(derived_age),
                       y = .fitted,
                       group = derived_vote,
                       color = derived_vote)) +
  geom_point() +
  geom_errorbar(aes(ymin = lower, 
                    ymax = upper),
                width = 0.1) +
  ylab("Predicted probability\nagree that no human role\nclimate change") +
  xlab("Level of education") +
  labs(color = "2020 vote") +
  scale_color_manual(values = c("Trump" = "red",
                                "Biden" = "blue")) +
  theme_bw(base_size = 24) +
  theme(legend.position = c(0.5, 0.5),
        legend.background = element_blank())  #+ 
  #coord_flip()

p
```

```{r}

p2 <- ggplot(aug_result, aes(x = factor(derived_age),
                       y = .fitted,
                       group = derived_vote,
                       color = derived_vote)) +
  geom_line() +
  geom_ribbon(aes(ymin = lower, 
                    ymax = upper,
                  group = derived_vote,
                  color = derived_vote,
                  fill = derived_vote,
                  alpha = 0.2)) +
  ylab("Predicted probability\nagree that no human role\nclimate change") +
  xlab("Level of education") +
  labs(color = "2020 vote") +
  scale_color_manual(values = c("Trump" = "red",
                                "Biden" = "blue")) +
  theme_bw(base_size = 24) +
  theme(legend.position = c(0.5, 0.5),
        legend.background = element_blank())  #+ 
  #coord_flip()

p2
```

## Exercise 3: showing when lasso regularizes a coefficient to zero

Create a plot where:

-   The `x axis` is each value of $\lambda$ used in `cv.glmnet` predicting college graduation (provided in code)
-   The `y axis` is each predictor in the dataset
-   There is a dot/point for each value of $\lambda$ where that particular predictor remains non-zero

**Hint**: see this Stack Overflow post for how to get coefficients at a specific lambda value - <https://stackoverflow.com/questions/66718416/how-to-get-the-coefficents-of-a-cross-validated-lasso-for-a-specific-lambda-not>

```{r}
#| echo: false
#| output: true 
library(glmnet)
library(ISLR2)
library(gamlr)

## model estimation
x_covar <- model.matrix(Grad.Rate ~ ., 
          College)[, -1] 
y <- College %>%
    select(Grad.Rate) %>%
    unlist() %>%
    as.numeric() 

set.seed(040484)
cv_lasso <- cv.glmnet(x_covar, 
                      y,
                      alpha = 1) 


## your code here 

all_coefs = cv_lasso$glmnet.fit$beta

for(lamb in cv_lasso$lambda){
  print(coef(cv_lasso, s = lamb))
}

#coef(cv_lasso, select = )




#dim(cv_lasso$gamlr$beta)

all_coefs = cv_lasso$glmnet.fit$beta
all_labmda = cv_lasso$lambda

all_coefs[,1]

```
