---
title: "Session 2: ggplot2 Refresher"
author: "Prof. Rebecca A. Johnson"
date: "3 September 2024"
format:
  revealjs: 
    theme: ppol5202_workingtheme.scss
    highlight-style: arrow-dark
    code-block-background: true
    slide-number: true
editor: visual
---

# Intro

## Welcome! A reminder

![Setup assignment](input/setup_assign.png)

## Overview

-   **Prepping data to plot**

-   **Three types of EDA**[^1]

    -   Comparisons
    -   Distributions / Relationships
    -   Compositions

[^1]: Acknowledgements to Prof Pickens' Data visualization for exploratory data analysis lecture for this framework!

# Prepping Data to Plot

## Where we are

-   **Prepping data to plot**

-   [Three types of EDA]{style="color:gray;"}

## Example data

```{r}
#| echo: true
#| output-location: slide
library(dplyr)
policy_df <- read.csv("input/policyareas_inputdata.csv")
colnames(policy_df) <- c("time", "policy_areas")
head(policy_df, 4)
unique(unlist(strsplit(policy_df$policy_areas, ", ")))

```

## Two options:

1.  Leave data as is: one row per survey response; contains 1+ policy areas
2.  Transform data to one row per survey response-policy area dyad

::: {.callout-tip title="To Discuss"}
Which approach would you take?
:::

## Approach two: each row is a response-policy area dyad

1.  `Base R` approach: do.call and strsplit
2.  `separate` within `tidyr`

## Base R

```{r}
#| echo: true
#| output-location: slide
library(data.table)
split <- strsplit(as.character(policy_df$policy_areas), 
                      ', ')
split[1:2]
df_split <- rbindlist(lapply(split, function(x) data.table(t(x))),
  fill = TRUE)
colnames(df_split) <- sprintf("parea_%s", 1:ncol(df_split))
policydf_wcols <- cbind.data.frame(policy_df, df_split)
head(policydf_wcols, 3)


```

## Separate within `tidyr`

```{r}
#| echo: true
#| output-location: slide
library(tidyr)
policydf_wcols_t <- policy_df %>%
                separate(policy_areas, 
                         into = sprintf("parea_%s", 1:4), 
                        sep = ", ", extra = "drop")
head(policydf_wcols_t)
```

## Comparing

::: {.callout-tip title="To Discuss"}
What are the pros and cons of the `tidyr` `separate` versus more `base R` approach?
:::

## With either approach, melt into long

```{r}
library(reshape2)
policydf_long <- reshape2::melt(policydf_wcols_t %>%
                              mutate(id = sprintf("response_%s", 
                                                1:n())) %>%
                            select(-time), id.var = "id") %>% 
                            arrange(id) 
head(policydf_long)
```

## One approach: grouping/aggregating within the ggplot call itself

```{r}
#| echo: true
#| output-location: slide
library(ggplot2)
ggplot(policydf_long %>%
      filter(!is.na(value)) %>%
      group_by(value) %>%
      summarise(count = n()),
      aes(x = reorder(value, count), y = count)) +
  geom_bar(stat = "identity") +
  scale_y_continuous(breaks = 1:10) +
  xlab("Policy area") +
  ylab("Count of students interested (non-unique)") +
  coord_flip() +
  theme_bw(base_size = 24) 


```

## Working together: improving the visualization

Two suggestions from last time:

1.  End of bar labels
2.  Coloring top categories

```{r}
#| echo: true
ggplot(policydf_long %>%
      filter(!is.na(value)) %>%
      group_by(value) %>%
      summarise(count = n()),
      aes(x = reorder(value, count), y = count, fill = count)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = count), hjust = -0.2, size = 6) +
  scale_y_continuous(breaks = 1:10) +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  xlab("Policy area") +
  ylab("Count of students interested (non-unique)") +
  coord_flip() +
  theme_bw(base_size = 24) +
  theme(legend.position = "none")

```
```{R}
policydf_summary <- policydf_long %>%
  filter(!is.na(value)) %>%
  group_by(value) %>%
  summarise(count = n()) %>%
  mutate(category = ifelse(rank(-count) <= 3, "Top 3", "Others"))

ggplot(policydf_summary, aes(x = reorder(value, count), y = count, fill = category)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = count), hjust = -0.2, size = 6) +
  scale_y_continuous(breaks = 1:10) +
  scale_fill_manual(values = c("Top 3" = "darkblue", "Others" = "lightblue")) +
  xlab("Policy area") +
  ylab("Count of students interested (non-unique)") +
  coord_flip() +
  theme_bw(base_size = 24) +
  theme(legend.position = "none")

```

# EDA types

## Where we are

-   [Prepping data to plot]{style="color:gray;"}

-   **Three types of EDA**: example plots

    -   **Comparisons**
    -   [Distributions / Relationships]{style="color:gray;"}
    -   [Compositions]{style="color:gray;"}

## Comparisons: keywords and chart types

-   **Keywords:** before/after, categories, compare, contrast, over time, peaks, rank, trend, types, valleys
-   **Chart types:** Bars (grouped, stacked), **dot plots,** line graphs, **slope graphs**, small multiples, heat maps, connected scatterplots, pyramid plots, ridgeline plots

::: aside
Source: Scott Berinato (2016), Good Charts
:::

## Dot plots

![Source: Wilke Figure 6-11](input/wilke-6-11-dotplot.png) \## Slope graphs

![Source: Wilke Figure 12-13](input/wilke-12-13-slopegraph.png)

## Ridgeline plots

![Source: Wilke Figure 9-9](input/wilke-9-9-ridgeline.png)

## Where we are

-   [Prepping data to plot]{style="color:gray;"}

-   **Three types of EDA**: example plots

    -   [Comparisons]{style="color:gray;"}
    -   **Distributions / Relationships**
    -   [Compositions]{style="color:gray;"}

## Distributions: keywords and chart types

-   **Keywords**: alluvial, cluster, distributed, from/to, plotted, points, spread, spread over, relative to, transfer
-   **Chart types**: **Alluvial charts (parallel sets)**, bubble charts, histograms, **Sankey diagrams**, scatterplots, density plots, cumulative density plots, quantile-quantile (q-q) plots, **violin plots,** boxplots, **strip charts**, sina plots, ridgeline plots, paired scatterplot, contour lines, 2D bins, hex bins, **correlogram**, stacked area plots

::: aside
Source: Scott Berinato (2016), Good Charts
:::

## Alluvial charts (Parallel sets)

![Source: https://datavizproject.com/data-type/alluvial-diagram/](input/alluvial.png){fig-align="center"}

## Sankey diagrams

Flow diagram - width of the area is proportional to flow amount

![Source: https://datavizproject.com/data-type/sankey-diagram/](input/sankey.png){fig-align="center"}

## Violin plots

![Source: Wilke Figure 9-4](input/wilke-9-4-violin.png)

## Strip Charts

Note: the data in this plot has been jittered to avoid overplotting.

![Source: Wilke Figure 9-8](input/wilke-9-8-strip-jittered.png)

## Correlograms

![Source: Wilke Figure 12.6](input/wilke-12-6-correlogram.png){fig-align="center"}

## Where we are

-   [Prepping data to plot]{style="color:gray;"}

-   **Three types of EDA**: example plots

    -   [Comparisons]{style="color:gray;"}
    -   [Distributions / Relationships]{style="color:gray;"}
    -   **Compositions**

## Compositions: keywords and chart types

-   **Keywords**: components, divvied up, group, makes up, of the whole, parts, percentage, pieces, portion, proportion, slices, subsections, total
-   **Chart types**: Pie charts, stacked area charts, stacked bar charts, treemaps, **mosaic plots,** **unit plots (waffle charts)**

::: aside
Source: Scott Berinato (2016), Good Charts
:::

## Mosaic Plots

![Source: Wilke Figure 11-3](input/wilke-11-3-mosaic.png)

## Unit Plots

![Source: https://www.storytellingwithdata.com/blog/what-is-a-unit-chart](input/unit-chart.png){fig-align="center"}

## Waffle Charts/Square Area Charts

![Source: https://www.storytellingwithdata.com/blog/what-is-a-square-area-chart](input/waffle.png)

## Where we are

-   [Prepping data to plot]{style="color:gray;"}

-   **Three types of EDA**: in `ggplot2`

    -   âœ… Comparisons
    -   **Distributions / Relationships**
    -   Compositions

## Example

Child poverty rates across metropolitan versus non-metropolitan areas in different Midwestern states

```{r}
#| echo: true
#| output-location: slide
table(midwest$inmetro)
table(midwest$state)
summary(midwest$percchildbelowpovert)
midwest <- midwest %>%
    mutate(metro_cat = case_when(inmetro == 1 ~ "Metropolitan",
                                 inmetro == 0 ~ "Non-metropolitan",
                                 TRUE ~ NA_character_))
table(midwest$inmetro, midwest$metro_cat)
```

## Less informative visualization: mean values in metro versus outside of metro

```{r}
#| echo: true
#| output-location: slide
## mean values by metro
ggplot(midwest %>% 
         group_by(metro_cat) %>% summarise(m = 
        mean(percchildbelowpovert)),
       aes(x = metro_cat, y = m)) +
  geom_bar(stat = "identity") +
  xlab("What kind of area?") +
  ylab("Distribution: % \nchildren in poverty") +
  theme_bw() 
  


```

## More informative 1: violin plot w/ no summary stats

```{r}
#| echo: true
#| output-location: slide
ggplot(midwest,
       aes(x = metro_cat, y = percchildbelowpovert)) +
  geom_violin() +
  xlab("What kind of area?") +
  ylab("Distribution: %\nchildren in poverty") +
  theme_bw(base_size = 24) 
  

```

## More informative 2: violin plot w/ median + quartile

```{r}
#| echo: true
#| output-location: slide
ggplot(midwest,
       aes(x = metro_cat, y = percchildbelowpovert)) +
  geom_violin() +
  geom_boxplot(width=0.1) +
  xlab("What kind of area?") +
  ylab("Distribution: %\nchildren in poverty") +
  theme_bw(base_size = 24) 
```

## More informative 3: violin plot w/ median + quartile faceted by state

```{r}
#| echo: true
#| output-location: slide
ggplot(midwest,
       aes(x = metro_cat, y = percchildbelowpovert,
           fill = metro_cat)) +
  geom_violin() +
  geom_boxplot(width=0.1) +
  facet_wrap(~state, ncol = 5) +
  xlab("What kind of area?") +
  ylab("Distribution: % children\nin poverty") +
  theme_bw(base_size = 16) +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        legend.position = "bottom") +
  labs(fill = "") +
  scale_fill_manual(values = c("Metropolitan" = "wheat4",
                               "Non-metropolitan" = "darkgreen")) 
```

## Wrapping up and Wednesday's lab

What we covered:

-   **Prepping data to plot**

-   **Three types of EDA:** examples of all three; `ggplot2` example of distributions

    -   Comparisons
    -   Distributions / Relationships
    -   Compositions

-   **Wednesday's lab**: `ggplot2` practice of all three types

## Preview of next week: automation

```{r}
#| echo: true
#| output-location: slide
all_perc <- grep("^perc", colnames(midwest), value = TRUE)
all_perc

plot_one_perc <- function(input_data, x_category, y_outcome){
  ## your code here 
  
}

```

## Preview of next week: automation

Variable names and non-standard evaluation (NSE)

```{r}
#| echo: true
#| output-location: slide
input_data <- midwest 
x_category <- "metro_cat"
y_outcome <- as.character(all_perc[1])
ggplot(input_data,
       aes(x = !!sym(x_category), y = !!sym(y_outcome))) +
  geom_violin() +
  geom_boxplot(width=0.1) +
  xlab("What kind of area?") +
  ylab(sprintf("Distribution: %s", y_outcome)) +
  theme_bw(base_size = 24) 

```
