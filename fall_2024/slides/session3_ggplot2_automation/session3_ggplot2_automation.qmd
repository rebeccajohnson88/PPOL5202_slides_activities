---
title: "Session 3: ggplot2 automation"
author: "Prof. Rebecca A. Johnson"
date: "9 September 2024"
format:
  revealjs: 
    theme: ppol5202_workingtheme.scss
    highlight-style: arrow-dark
    code-block-background: true
    slide-number: true
editor: visual
---

# Intro

## Overview: two forms of automation

-   **Functions within a script**

-   **Document-level parameters**

# Functions within a script

## Example plot to parametrize

```{r}
#| echo: false
#| output: false
library(ggplot2)
library(tidyverse)
midwest <- midwest %>%
    mutate(metro_cat = case_when(inmetro == 1 ~ "Metropolitan",
                                 inmetro == 0 ~ "Non-metropolitan",
                                 TRUE ~ NA_character_))

```

```{r}
#| echo: true
#| output: false
ggplot(midwest %>% filter(state == "IL"),
       aes(x = metro_cat, y = percchildbelowpovert)) +
  geom_violin() +
  geom_boxplot(width=0.1) +
  xlab("What kind of area?") +
  ylab("Distribution: %\nchildren in poverty: Illinois") +
  theme_bw(base_size = 16) 

```

## Elements to parametrize

-   `dataframe`: both in general + filtering to Illinois
-   `x-axis factor variable`: contrasting metro v. non-metro; could explore other contrasts like between counties
-   `y axis continuous variable`: plotting child poverty rates; could explore other outcomes like adult poverty, racial/ethnic composition, and so on
-   `axis titles`: as the content of the plot changes, these elements should change

## Blocker to parametrization

-   Because variable names are evaluated with reference to a dataframe/not in quotes, some barriers to parametrizing them
-   More discussion here: https://www.sesync.org/resources/standardizing-non-standard-evaluation-r

```{r}
#| echo: true
#| output: false
#| eval: false 
# THROWS ERROR 
var_y <- "percchildbelowpovert"
var_x <- "metro_cat"
ggplot(midwest %>% filter(state == "IL"),
       aes(x = var_x, y = var_y)) +
  geom_violin() 

```

## Two solutions

1.  `.data[[varname]]` syntax
2.  `!!sym(varname)` syntax

## Solution 1: subsetting using string

the .data knows to pull from the dataset referenced earlier

```{r}
#| echo: true
#| output: false
var_y <- "percchildbelowpovert"
var_x <- "metro_cat"
p1 <- ggplot(midwest %>% filter(state == "IL"),
       aes(x = .data[[var_x]], y = .data[[var_y]])) +
  geom_violin() 

```

## Solution 2: sym wrapper

`sym` documentation: https://www.rdocumentation.org/packages/rlang/versions/1.1.4/topics/sym

will create identical set of plots for previous .data example

```{r}
#| echo: true
#| output: false
p2 <- ggplot(midwest %>% filter(state == "IL"),
       aes(x = !!sym(var_x), y = !!sym(var_y))) +
  geom_violin() 

p2

```

## What else do we still need to parametrize in the plotting code?

-   `state` to filter to
-   `x axis title`
-   `y axis title`

```{r}
#| echo: true
#| output: false

ggplot(midwest %>% filter(state == "IL"),
       aes(x = !!sym(var_x), y = !!sym(var_y))) +
  geom_violin() +
  geom_boxplot(width=0.1) +
  xlab("What kind of area?") +
  ylab("Distribution: %\nchildren in poverty: Illinois") +
  theme_bw(base_size = 16) 
```

## For strings: placeholder syntax

`sprintf`: structure is `sprintf("Fixed part: this varies %s and this varies %s", vary_1, vary_2)` with different options for the placeholder. after the comma you indicate the placeholders in the appropriate order (they are position dependent).

-   `%s`: placeholder for string

-   `%d`: placeholder for integer (e.g., 42)

-   `%f`: floating point number (e.g., 42.524)

-   `%.xf`: floating point number with `x` digits in the float, indicates rounding of decimal, %.2f would round it 2 two decimals

More details here: [sprintf details](https://www.gastonsanchez.com/r4strings/c-style-formatting.html)

## Developing the labels

variable label below would create a string that included the arguments statistic and state

```{r}
#| echo: true
#| output: true
fixed_label <- "Distribution: %\nchildren in poverty: Illinois"
statistic <- "percent children in poverty"
state <- "IL"
variable_label <- sprintf("Distribution: \n%s: %s",
                          statistic, 
                          state)
variable_label

```

## How can we generate these labels less manually?

-   For the `y axis`, use `regex` to transform raw column name (e.g., `percwhite`) -\> more meaningful title

```{r}
#| echo: true
#| output: true
title_maker <- function(onecol){
  #function is taking the "perc" from the name and making it "percent" 
  #strremove line is removing the "perc" from the variable name and changing it to title case
  #pasting the things together as a single string with a space as the deliminator
  clean_perc <- gsub("perc", "Percent", onecol)
  clean_str_perc <- paste(c(str_extract(clean_perc, "Percent"), 
              str_to_title(str_remove(clean_perc, "Percent"))),
              collapse = " ")
  return(clean_str_perc)
}
title_maker("percwhite")
title_maker("percadultpoverty")



```

## Adding a conditional to handle more cases

```{r}
#| echo: true
#| output: true
title_maker <- function(onecol){
  clean_perc <- gsub("perc", "Percent", onecol)
  clean_str_perc <- paste(c(str_extract(clean_perc, "Percent"), 
              str_to_title(str_remove(clean_perc, "Percent"))),
              collapse = " ")
  if(grepl("povert", clean_str_perc)){
      #creates a conditional statement that detects whether povert is in the string 
      #and make it "poverty" similar to treatment of perc
      clean_str_pov <- paste(c(str_remove(clean_str_perc,
                                      "povert(y)?"),
                      str_to_title(str_extract(clean_str_perc, 
                                       "povert(y)?"))),
              collapse = " ")
      return(clean_str_pov)
  } else{
      return(clean_str_perc)
  }
}
title_maker("percwhite")
title_maker("percadultpoverty")

```

## For the state labels

R has a built-in state name/state abbreviation that we can use to identify the abbreviation based on name and vise versa

```{r}
#| echo: true
#| output: true
state_name <- state.name[state.abb == "IL"]
state_name
```

## Putting it all together in a function

Could also add other exceptions for `var_x`, `var_y` but focusing on state as an example

```{r}
#| echo: true
#| output: true
plot_onestat_onestate <- function(input_data,
                                  state_abbrev,
                                  var_x, 
                                  var_y,
                                  x_label){
  
## adding error handling
  if(!state_abbrev %in% input_data$state){
    stop(sprintf("Error; state not found in dataset; available states: %s",
              paste(unique(input_data$state), collapse = "; ")))
  }
  #if statement causes an error/stops the function if the state abbreviation is not in the 
  #input dataset and provides a list of the available states in the dataset
  
  p <- ggplot(input_data %>% filter(state == state_abbrev),
       aes(x = !!sym(var_x), y = !!sym(var_y))) +
  geom_violin() +
  geom_boxplot(width=0.1) +
  xlab(x_label) +
  ylab(sprintf("Distribution: %s\nin %s", 
               title_maker(var_y),
               state.name[state.abb == state_abbrev])) +
  theme_bw() +
  theme(axis.title.y = element_text(size = 6))
  return(p)
  
}
```

## Executing the function with one state/one outcome

provides an error because DC is not in the dataset

```{r}
#| echo: true
#| output: true
#| error: true
## throws error
plot_onestat_onestate(input_data = midwest,
                      state_abbrev = "DC", 
                      var_x = "metro_cat",
                      var_y = "percadultpoverty",
                      x_label = "What kind of area?")

```

## Executing the function with one state/one outcome

feeding in the state abbreviate and the variable names

```{r}
#| echo: true
#| output: true
## doesnt throw error 
plot_onestat_onestate(input_data = midwest,
                      state_abbrev = "WI", 
                      var_x = "metro_cat",
                      var_y = "percadultpoverty",
                      x_label = "What kind of area?")




```

## Executing the function with multiple states / outcomes

-   Example: compare Illinois and Wisconsin; different types of poverty (child; adult; elderly- three distinct columns)
-   `mapply` as useful for iterating over multiple parameters (`state` and `var_y`)

`mapply(function, param1_varying, param2_varying, MoreArgs = list(static_param1 = x, ...))`

iterates over two states and two outcome variables

mapply iterates over multiple parameters, utilizes a function as first parameter, next is the parameter (list) you want to iterate through. moreargs is specifically a list and keeps the remaining items the same in the function.

mapply needs to know all combinations; varying parameters need to be the same size; does not automatically do all the combinations; varying parameters need to be structured like how a nested for loop would go through the different options.

## Executing the function with multiple states / outcomes

```{r}
#| echo: true
#| output: true
library(gridExtra)
states_compare <- rep(c("IL", "WI"), each = 3)
outcomes_compare <- rep(c("percadultpoverty", 
                      "percchildbelowpovert",
                      "percelderlypoverty"), 
                      times = 2)


p_compare <- mapply(plot_onestat_onestate,
                    state_abbrev = states_compare,
                    var_y = outcomes_compare,
                    MoreArgs = list(input_data = midwest,
                                    var_x = "metro_cat",
                                    x_label = "What kind of area?"),
                    SIMPLIFY = FALSE)

#function creates a list of plots. 
#simplify = false stops mapply from returning a data frame

```

## How do we plot the list of plots?

do.call(function, list) applies a function over a list. our list in this case is p_compare, which is a list of plots. grid.arrange plots different plots on a grid.

do.call does need to be fed a list as an argument

```{r}
#| echo: true
#| output: true

## arrange on grid- more automatically
do.call(grid.arrange, p_compare)

```

## How do we plot the list of plots?

```{r}
#| echo: true
#| output: true
#| output-location: slide 
#| fig-width: 6
#| fig-height: 8
#| fig-align: center
## arrange on grid - more manually
names(p_compare) <- paste(states_compare, outcomes_compare, sep = "_")
grid.arrange(p_compare$IL_percchildbelowpovert,
             p_compare$WI_percchildbelowpovert,
             p_compare$IL_percadultpoverty, 
            p_compare$WI_percadultpoverty,
             p_compare$IL_percelderlypoverty,
             p_compare$WI_percelderlypoverty,
             nrow = 3)

#specifies 3 rows for the grid arrange and order of plots to make it easy to compare the 
#same stat for the two states across rows

```

## Where we are

-   [Functions within a script]{style="color:gray;"}

-   **Document-level parameters**

# Document-level parameters

## What might this be used for?

-   Want to generate a series of data reports for different groupings of data (e.g., one report per state; one report per county; reports featuring different years of data)
-   Instead of:
    -   Creating one report
    -   Copying it over
    -   Changing substantive content within the code
-   Set up a document-level parameter

## Document-level parameters in Quarto

-   For document header (can set \>1 parameter too)
-   Within `.qmd`: `params$state`

![Header](input/params_header.png)

## Play around with example

`state_template.qmd`

## How would we automate this?

Goal: avoid copying that same document 5 times (one per state) and manually editing the parameter

1.  `R` script
2.  `bash` script

## R script to generate reports

-   `quarto_render` command + iterating over list of parameters to evaluate - command to basically render a given .qmd file (the raw code input files)
-   One thing to note is that we need to create a state-specific qmd to avoid things defaulting to last state we iterate over
-   the way that quarto works we need to copy the state_template and create a state-specific qmd for each state; renders to a html file; we can't just have a single qmd the renders into several different html files that represent different entities.
-   [Guide](https://www.carlosivanrodriguez.com/guides/workflow/parameterized-and-parallelized-quarto-reports/)

## R script to generate reports (scroll down on code)

```{r}
#| echo: true
#| eval: false 
library(quarto)
library(stringr)

render_one_report <- function(one_state){
  
  # Section 1: Create copies of main layout .qmd file
  # 1.a create filenames
  file_in <- sprintf("state_%s_template.qmd", one_state)
  
  # 1.b Create copies of the layout files using the modified file names
  file.copy(
    from = "state_template.qmd",
    to = file_in,
    overwrite = TRUE
    )
  
  # Section 2: Render reports using .qmd copies.
  quarto::quarto_render(
    input = file_in,
    execute_params = list(state = one_state),
    output_file = sprintf("demographicreport_%s.html", one_state)
    )
    
  # Section 3: Remove .qmd template copies
  file.remove(
    file_in
    )
  }

#creating list of all states in data and apply the render function on all states in the list. 
all_states <- unique(midwest$state)
lapply(all_states, render_one_report)
```

## Bash script to generate reports

-   Key is calling the parameter `$state` in various places
-   `-P` flag in quarto render to provide parameters
-   Execute: `bash render_allstates.sh`

similar to what the R script is doing but in bash

```{bash}
#| echo: true
#| eval: false 

#!/bin/bash
for state in "IL" "IN" "MI" "OH" "WI";
do
	cp state_template.qmd "${state}_template.qmd";
	quarto render "${state}_template.qmd" -o "cl_demreport_${state}.html" -P state:"$state";
done 
```

## Wrapping up

-   **Functions within a script**
    -   Start by plotting one example
    -   Think abut what to parametrize
    -   Parametrization might require regex/string cleaning functions
-   **Document-level parameters**
    -   Useful for automating report generation
    -   Can also incorporate parameters into the text of the report itself
